(* Author: Edwardo S. Rivera Hazim
   Class: CCOM 4087, Compilers

 tiger.grm - Parser for Chapter 4 Modern Compiler Implementation in ML. 
It parses the tiger language (from the book).
To Run: in the sml command line:
  1- CM.make "sources.cm"; (compile Parser)
  2- Parse.parse ("filename") to parse a tiger program
*)



structure A = Absyn
%%
%term
    EOF 
  | ID of string
  | INT of int | STRING of string 
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK 
  | LBRACE | RBRACE | DOT 
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF 
  | BREAK | NIL
  | FUNCTION | VAR | TYPE 
  | UMINUS | LOWER (*dummy terminals for precedence*)

%nonterm  exp of A.exp 
          | program of A.exp 
          | expSeq of (A.exp * pos) list  (* Semicolon separated list *) 
          | binop of A.exp                (*binary operations (math ones and comparison)*)
          | boolexp of A.exp              (*and and or expressions*)
          | lvalue of A.var               (*lvalue*)
          | vardec of A.dec               (*declaration of var*)
          | dec of A.dec                  (*declaration (var,fun or type)*)
          | declist of A.dec list         (*declaration list (one or more)*)
          | expList of A.exp list         (*expList, arguments of calling a function*)
          | field of (Symbol.symbol * A.exp * pos) (*field record*)
          | fieldList of (Symbol.symbol * A.exp * pos) list  (*Record fields*)
          | funDec of A.fundec            (*fun Declaration*)
          | funDecs of A.fundec list      (*fun declarations for mutual recursive functions*)
          | ty of A.ty                    (*type expression*)
          | typeDec of {name: Symbol.symbol, ty: A.ty, pos: pos} (* one hour here... type declaration *)
          | typeDecs of {name: Symbol.symbol, ty: A.ty, pos: pos} list 
          | typeField of A.field 
          | typeFields of  A.field list

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE 
	DO OF NIL

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

(*After completing the parser, I have a lot of shift conflicts,
  so I decided to lookup the tiger.grm.desc file for she shifts.
  I tried by trial an error to minimize them, and I managed to have 0 conflicts.
  After that, I tried again my tests and it worked. From this one, it is worth
    to say a shift conflict that I resolved.

    Conflict: the shift typeDec/funDec, Reduce typeDecs/funDecs to dec. I resolved 
  it givind to dec (on these rules) the lowest precedence. This tells the parser to always 
  shift more typeDec/funDec inside the TypeDecs -> TypeDecs TypeDec and
  funDecs -> funDecs funDec rules. 
   *)
(* Precedence Directives *)
%nonassoc LOWER
%nonassoc THEN DO TYPE FUNCTION ID 
%nonassoc ASSIGN LBRACK ELSE OF          
%left       OR                                  
%left       AND                                     
%nonassoc   EQ NEQ LT LE GT GE                        
%left       PLUS MINUS                                
%left       TIMES DIVIDE                              
%left       UMINUS
%%

(* This is a skeleton grammar file, meant to illustrate what kind of
 * declarations are necessary above the %% mark.  Students are expected
 *  to replace the two dummy productions below with an actual grammar. 
 *)

program	: exp				(exp)

(*simple expressions*)
exp: INT			 (A.IntExp INT) 
exp: NIL       (A.NilExp) 
exp: STRING		 (A.StringExp (STRING, STRINGleft))

(*lvalue*)
exp: lvalue     (A.VarExp lvalue)

(*binary and boolean expressions*)
exp: binop      (binop)
exp: boolexp    (boolexp)

(*expSeq*)
exp: LPAREN expSeq RPAREN    (A.SeqExp expSeq)

(*assigment*) 
exp: lvalue ASSIGN exp (A.AssignExp {var=lvalue,exp=exp,pos=lvalueleft})

(*array*)
exp: ID LBRACK exp RBRACK OF exp (A.ArrayExp {typ=Symbol.symbol ID, size=exp1, init=exp2,pos=IDleft})

(*function call, it has the expList (arguments) of the function*)
exp: ID LPAREN expList RPAREN          (A.CallExp {func = Symbol.symbol ID, args = expList, pos = IDleft})

(*Record expression*)
exp: ID LBRACE fieldList RBRACE (A.RecordExp {fields=fieldList, typ=Symbol.symbol ID, pos=IDleft}) 

(* control and let expressions*)
exp: IF exp THEN exp           (A.IfExp {test=exp1, then'=exp2, else'=NONE, pos=exp1left})
exp: IF exp THEN exp ELSE exp  (A.IfExp {test=exp1, then'=exp2, else'=SOME exp3,pos=exp1left})
exp: WHILE exp DO exp          (A.WhileExp {test=exp1, body=exp2,pos=exp1left})
exp: FOR ID ASSIGN exp TO exp DO exp (A.ForExp {var = Symbol.symbol ID, escape = ref false, lo = exp1, hi = exp2, body = exp3, pos = FORleft})
exp: BREAK                           (A.BreakExp(BREAKleft))
exp: LET declist IN expSeq END  (A.LetExp {decs=declist, body=A.SeqExp expSeq, pos=LETleft})


(*math binary exps*)
binop: MINUS exp %prec UMINUS (A.OpExp {left=A.IntExp ~1, oper=A.TimesOp, right=exp, pos=MINUSleft})
binop: exp PLUS exp		(A.OpExp {left=exp1, oper=A.PlusOp, right=exp2, pos=exp1left})
binop: exp MINUS exp   (A.OpExp {left=exp1, oper=A.MinusOp, right=exp2, pos=exp1left})
binop: exp TIMES exp   (A.OpExp {left=exp1, oper=A.TimesOp, right=exp2, pos=exp1left})
binop: exp DIVIDE exp   (A.OpExp {left=exp1, oper=A.DivideOp, right=exp2, pos=exp1left})

(*comparison binary exps*)
binop: exp EQ exp   (A.OpExp {left=exp1, oper=A.EqOp, right=exp2, pos=exp1left})
binop: exp NEQ exp   (A.OpExp {left=exp1, oper=A.NeqOp, right=exp2, pos=exp1left})
binop: exp LE exp   (A.OpExp {left=exp1, oper=A.LeOp, right=exp2, pos=exp1left})
binop: exp LT exp   (A.OpExp {left=exp1, oper=A.LtOp, right=exp2, pos=exp1left})
binop: exp GE exp   (A.OpExp {left=exp1, oper=A.GeOp, right=exp2, pos=exp1left})
binop: exp GT exp   (A.OpExp {left=exp1, oper=A.GtOp, right=exp2, pos=exp1left})

(*boolean exps*)
boolexp: exp AND exp    (A.IfExp {test = exp1, then' = exp2, else' = SOME(A.IntExp(0)), pos = exp1left})
boolexp: exp OR exp    (A.IfExp {test = exp1, then' = A.IntExp(1), else' = SOME exp2, pos = exp1left})

(* lvalues *)
lvalue: ID (A.SimpleVar(Symbol.symbol ID, IDleft))
lvalue: lvalue DOT ID            (A.FieldVar (lvalue, Symbol.symbol ID, lvalueleft))
lvalue: lvalue LBRACK exp RBRACK        (A.SubscriptVar (lvalue, exp, lvalueleft))
lvalue: ID LBRACK exp RBRACK     (A.SubscriptVar (A.SimpleVar (Symbol.symbol ID, IDleft),exp, IDleft)) 

(* declaration List *)
declist: dec  (dec :: nil)
declist: dec declist  (dec :: declist)

(*declaration types: var, fun or type*)
dec: vardec (vardec)
dec: typeDecs %prec LOWER (A.TypeDec typeDecs)
dec: funDecs %prec LOWER  (A.FunctionDec funDecs)

(*var declaration*)
vardec: VAR ID ASSIGN exp (A.VarDec {name=Symbol.symbol ID, init=exp, pos=VARleft, escape= ref true, typ=NONE})
vardec: VAR ID COLON ID ASSIGN exp (A.VarDec {name=Symbol.symbol ID1, escape=ref false, 
                                              typ=SOME (Symbol.symbol ID2,ID2left), init=exp, pos=VARleft})


(*type declaration*)
typeDec: TYPE ID EQ ty     ({name = Symbol.symbol ID, ty = ty, pos = TYPEleft})

typeDecs: typeDec          ([typeDec])
typeDecs: typeDecs typeDec   (typeDecs @ [typeDec])

ty: ID                      (A.NameTy(Symbol.symbol ID, IDleft))
ty: LBRACE typeFields RBRACE  (A.RecordTy(typeFields))
ty: ARRAY OF ID             (A.ArrayTy(Symbol.symbol ID, ARRAYleft))

typeField: ID COLON ID        ({name=Symbol.symbol ID1,escape=ref false,typ=Symbol.symbol ID2, pos=ID1left})

typeFields: (*empty*)          (nil)
typeFields: typeField          ([typeField])
typeFields: typeFields COMMA typeField (typeFields @ [typeField])

(*fun Declaration, base cases*)
funDec : FUNCTION ID LPAREN typeFields RPAREN EQ exp ({name=Symbol.symbol ID, params=typeFields,
                                                 result=NONE,body= exp, pos=FUNCTIONleft})
funDec: FUNCTION ID LPAREN typeFields RPAREN  COLON ID EQ exp  ({name=Symbol.symbol ID1,
                                                 params=typeFields, result=SOME (Symbol.symbol ID2, ID2left),
                                                 body=exp, pos=FUNCTIONleft}) 

(*fun Declaration, recursive case*)
funDecs: funDec    ([funDec])
funDecs: funDecs funDec (funDecs @ [funDec])

(*Base case: field*)
field: ID EQ exp (Symbol.symbol ID, exp, IDleft) 

(*field list*)

fieldList:                 (nil)
fieldList: field           ([field])
fieldList: fieldList COMMA field (fieldList @ [field]) 

(*arguments of function call*)
expList: (*empty*)             (nil)
expList: exp                   ([exp])
expList: expList COMMA exp (expList @ [exp])

(*secuence expressions*)
expSeq:                       (nil)
expSeq: exp                  ([(exp, expleft)])
expSeq: expSeq SEMICOLON exp (expSeq @ [(exp,expleft)])